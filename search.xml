<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>printf导致的内存泄漏</title>
      <link href="/2022/03/31/printf%E5%AF%BC%E8%87%B4%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
      <url>/2022/03/31/printf%E5%AF%BC%E8%87%B4%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>printf接收的字符串，是格式字符串，也就以为着，我传进来或者输入进来的这个字符串，也可以是格式字符串。<br>比如在buffer里面放了一个“%d”，但系统实际并没有把参数压栈，这个时候，访问是不会越界的。而且格式化字符串有个可以加成”%n$d“，n代表第几个%d参数，由于数据根本没有压入栈，我们可以通过n控制去访问栈上的其他数据。</p><p><img src="http://jingyingshi.top/images/printf%E5%88%86%E6%9E%90.png" alt="%) 验证： &lt;figure class="></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">int main(int argc,char** argv)</span><br><span class="line">&#123;</span><br><span class="line">        FILE *fp;</span><br><span class="line">char password[20] = &#123;0&#125;;</span><br><span class="line">if((fp = fopen(&quot;./password&quot;,&quot;r+t&quot;))!= NULL)</span><br><span class="line">&#123;</span><br><span class="line">fread(password,sizeof(char),20,fp);</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">perror(&quot;error&quot;);</span><br><span class="line">&#125;</span><br><span class="line">char buffer[1024] = &#123;0&#125;;</span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;please input your password:&quot;);</span><br><span class="line">scanf(&quot;%s&quot;,&amp;buffer);</span><br><span class="line">if(strcmp(password,buffer) == 0)</span><br><span class="line">&#123;</span><br><span class="line">puts(&quot;succed\n&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;error\n&quot;);</span><br><span class="line">printf(buffer);</span><br><span class="line">printf(&quot;\n is error password \n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出： <img src="/images/printf%E7%BB%93%E6%9E%9C1.png%E2%80%9D&gt;" class="" title="&lt;&#x2F;p&gt; &lt;p&gt;&lt;img src&#x3D;http:&#x2F;&#x2F;jingyingshi.top&#x2F;images&#x2F;printf%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90.png alt&#x3D;img&gt;&lt;&#x2F;p&gt;">]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>String 的长度限制</title>
      <link href="/2022/02/13/String-%E7%9A%84%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6/"/>
      <url>/2022/02/13/String-%E7%9A%84%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>String类中有很多重载的构造函数，其中有几个是支持用户传入length来执行长度的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public String(byte bytes[], int offset, int length) </span><br></pre></td></tr></table></figure><p>可以看出，String的最大长度需在int的范围内。<br>根据Integer类的定义，java.lang.Integer#MAX_VALUE的最大值是2^31 - 1;<br>但这个值只是在运行期间，我们构造String的时候可以支持的一个最大长度，而实际上，在编译期，定义字符串的时候也是有长度限制的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s = &quot;11111...1111&quot;;//其中有10万个字符&quot;1&quot;</span><br></pre></td></tr></table></figure><p>代码错误：常量字符串过长<br>其实，形如String s = “xxx”;定义String的时候，xxx被我们称之为字面量，这种字面量在编译之后会以常量的形式进入到Class常量池。<br>那么问题就来了，因为要进入常量池，就要遵守常量池的有关规定。</p><h1 id="常量池限制"><a href="#常量池限制" class="headerlink" title="常量池限制"></a>常量池限制</h1><p>我们知道，javac是将Java文件编译成class文件的一个命令，那么在Class文件生成过程中，就需要遵守一定的格式。<br>根据《Java虚拟机规范》中第4.4章节常量池的定义，CONSTANT_String_info 用于表示 java.lang.String 类型的常量对象，格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CONSTANT_String_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u2 string_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，string_index 项的值必须是对常量池的有效索引， 常量池在该索引处的项必须是 CONSTANT_Utf8_info 结构，表示一组 Unicode 码点序列，这组 Unicode 码点序列最终会被初始化为一个 String 对象。<br>CONSTANT_Utf8_info 结构用于表示字符串常量的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CONSTANT_Utf8_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u2 length;</span><br><span class="line">    u1 bytes[length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，length则指明了 bytes[]数组的长度，其类型为u2，u2表示两个字节的无符号数，那么1个字节有8位，2个字节就有16位。<br>16位无符号数可表示的最大值位2^16 - 1 = 65535。<br>也就是说，Class文件中常量池的格式规定了，其字符串常量的长度不能超过65535。<br>那么，我们尝试使用以下方式定义字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s = &quot;11111...1111&quot;;//其中有65535个字符&quot;1&quot;</span><br></pre></td></tr></table></figure><p>尝试使用javac编译，同样会得到”错误: 常量字符串过长”，那么原因是什么呢？<br>其实，这个原因在javac的代码中可以找到的，在Gen类中的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private void checkStringConstant(DiagnosticPosition var1, Object var2) &#123;</span><br><span class="line">    if (this.nerrs == 0 &amp;&amp; var2 != null &amp;&amp; var2 instanceof String &amp;&amp; ((String)var2).length() &gt;= 65535) &#123;</span><br><span class="line">        this.log.error(var1, &quot;limit.string&quot;, new Object[0]);</span><br><span class="line">        ++this.nerrs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中可以看出，当参数类型为String，并且长度大于等于65535的时候，就会导致编译失败。</p><h1 id="运行期限制"><a href="#运行期限制" class="headerlink" title="运行期限制"></a>运行期限制</h1><p>上面提到的这种String长度的限制是编译期的限制，也就是使用String s= “”;这种字面值方式定义的时候才会有的限制。<br>那么。String在运行期有没有限制呢，答案是有的，就是我们前文提到的那个Integer.MAX_VALUE ，这个值约等于4G，在运行期，如果String的长度超过这个范围，就可能会抛出异常。(在jdk 1.9之前）<br>int 是一个 32 位变量类型，取正数部分来算的话，他们最长可以有有近4G的容量。</p><blockquote><p>2^31-1 =2147483647 个 16-bit Unicodecharacter<br>2147483647 * 16 = 34359738352 位<br>34359738352 / 8 = 4294967294 (Byte)<br>4294967294 / 1024 = 4194303.998046875 (KB)<br>4194303.998046875 / 1024 = 4095.9999980926513671875 (MB)<br>4095.9999980926513671875 / 1024 = 3.99999999813735485076904296875 (GB)</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>字符串有长度限制，在编译期，要求字符串常量池中的常量不能超过65535，并且在javac执行过程中控制了最大值为65534。<br>在运行期，长度不能超过Int的范围，否则会抛异常</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的对象一定在堆上分配吗？</title>
      <link href="/2022/01/31/Java%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1%E4%B8%80%E5%AE%9A%E5%9C%A8%E5%A0%86%E4%B8%8A%E5%88%86%E9%85%8D%E5%90%97%EF%BC%9F/"/>
      <url>/2022/01/31/Java%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1%E4%B8%80%E5%AE%9A%E5%9C%A8%E5%A0%86%E4%B8%8A%E5%88%86%E9%85%8D%E5%90%97%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="回答"><a href="#回答" class="headerlink" title="回答"></a>回答</h1><p>  不一定，随着JIT编译器的发展，在编译期间，如果JIT经过逃逸分析，发现有些对象没有逃逸出方法，那么有可能堆内存分配会被优化成栈内存分配。但是这也并不是绝对的。就像我们前面看到的一样，在开启逃逸分析之后，也并不是所有User对象都没有在堆上分配。</p><h1 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h1><p>  逃逸分析(Escape Analysis)是目前Java虚拟机中比较前沿的优化技术。这是一种可以有效减少Java 程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。通过逃逸分析，Java Hotspot编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。<br>  逃逸分析的基本行为就是分析对象动态作用域：当一个对象在方法中被定义后，它可能被外部方法所引用，例如作为调用参数传递到其他地方中，称为方法逃逸。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static StringBuffer craeteStringBuffer(String s1, String s2) &#123;</span><br><span class="line">    StringBuffer sb = new StringBuffer();</span><br><span class="line">    sb.append(s1);</span><br><span class="line">    sb.append(s2);</span><br><span class="line">    return sb;//逃逸出去</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  StringBuffer sb是一个方法内部变量，上述代码中直接将sb返回，这样这个StringBuffer有可能被其他方法所改变，这样它的作用域就不只是在方法内部，虽然它是一个局部变量，称其逃逸到了方法外部。甚至还有可能被外部线程访问到，譬如赋值给类变量或可以在其他线程中访问的实例变量，称为线程逃逸。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static String createStringBuffer(String s1, String s2) &#123;</span><br><span class="line">    StringBuffer sb = new StringBuffer();</span><br><span class="line">    sb.append(s1);</span><br><span class="line">    sb.append(s2);</span><br><span class="line">    return sb.toString();//sb没有产生逃逸</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不直接返回 StringBuffer，那么StringBuffer将不会逃逸出方法。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integer 拆装箱</title>
      <link href="/2021/12/31/Integer-%E6%8B%86%E8%A3%85%E7%AE%B1/"/>
      <url>/2021/12/31/Integer-%E6%8B%86%E8%A3%85%E7%AE%B1/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] arr)&#123;</span><br><span class="line">    Integer a = 1;</span><br><span class="line">    Integer b = 2;</span><br><span class="line">    Integer c = 3;</span><br><span class="line">    Integer d = 3;</span><br><span class="line">    //语法糖装箱，相当于 Integer e = Integer.valueOf(321);</span><br><span class="line">    Integer e = 321; </span><br><span class="line">    Integer f = 321;</span><br><span class="line">    Integer df = Integer.valueOf(2);</span><br><span class="line">    Long g = 3L;</span><br><span class="line">    // == 运算不遇到算数运算的情况不会自动拆箱。</span><br><span class="line">    System.out.println(&quot;c == d &quot;+(c == d));//true 值在[-128,127]内</span><br><span class="line">    //在使用Integer.valueOf(i)生成Interger对象时，-128&lt;=i&lt;=127 时，</span><br><span class="line">    //会使用IntegerCache.cache[]，cache是IntegerCache的静态数组属性。</span><br><span class="line">    // 所以在-128到127内的数字使用Integer.valueOf()生成的对象都是同</span><br><span class="line">    //在IntegerCache中获取的。</span><br><span class="line">    System.out.println(&quot;e == f &quot;+(e == f)); //false 值不在[-128,127]内</span><br><span class="line">    //true value == ((Integer)obj).intValue();</span><br><span class="line">    System.out.println(&quot;e.equals(f) &quot;+(e.equals(f)));  </span><br><span class="line">    System.out.println(&quot;c == (a + b) &quot;+(c == (a + b)));</span><br><span class="line">    System.out.println(&quot;c.equals(a + b) &quot;+(c.equals(a + b)));</span><br><span class="line">    System.out.println(&quot;g == (a + b) &quot;+(g == (a + b)));</span><br><span class="line">    //equals不会自动类型转换</span><br><span class="line"></span><br><span class="line">    System.out.println(&quot;g.equals(a + b) &quot;+(g.equals(a + b)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原地算法</title>
      <link href="/2020/05/31/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95/"/>
      <url>/2020/05/31/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>原地算法基本上不需要额外辅助的数据结构，允许少量额外的辅助变量来转换数据的算法。当算法允许时，输入的数据通常会被要输出的数据覆盖。<br>输入数据被它的输出数据覆盖定义为原地算法既是不充分（快速排序的案例）也非必要。原地算法包含使用O(1)空间复杂度的所有算法。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function reverse(a[0..n])</span><br><span class="line">     allocate b[0..n]</span><br><span class="line">     for i from 0 to n</span><br><span class="line">         b[n - i] = a[i]</span><br><span class="line">     return b</span><br></pre></td></tr></table></figure><p>需要O(n)的空间来创建b数组，且配置存储器是一件缓慢的算法。<br>使用原地算法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function reverse-in-place(a[0..n])</span><br><span class="line">    for i from 0 to floor(n/2)</span><br><span class="line">        swap(a[i], a[n-i])</span><br></pre></td></tr></table></figure><p>a自己反转的内容来覆盖，把空间复杂度降为O(1)<br>快速排序常常被描述成一个原地算法，但事实并不是。大部分快速排序实现需要O(log n)的空间来支持它的分治递归。<br>它需要O(log2 n)空间，因为它的O(log n)堆栈帧架（stack frames）每一个都含有一个固定数量的指针（每一个大小为O(log n)）。<br>辨别拥有L的原地算法拥有某些有趣的含意；举例来说，它意指存在一个（相当地复杂）原地算法，决定在一个无向图（undirected graph）中的任两个节点（nodes）之间是否存在一条路径（path），这是一个需要O(n)个额外的空间，使用典型的算法像是深度优先搜索(depth-first search)（每个节点有个走访的比特）的问题。有些问题像是决定一个图形是否为二分图（bipartite graph）或测试两个图形使否有相同数量的连通分支，接着针对这些问题产出原地算法。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
